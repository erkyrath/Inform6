This file lists differences between the released Inform 6.31 and the old
"Inform 6.40" work tree found at http://www.seebs.net/tmp/cvsroot.zip.

This is based on one evening's walkthrough of the source code. I've
tried to note exactly what changed in each case. However, I have
certainly missed some changes, and maybe misread some of the ones I
found.

Many of the changes correspond to items on the old I6 suggestion list:
http://www.inform-fiction.org/suggestions/accept.html
(Changes marked "(unlisted)" are not on that list.)

As far as I know, none of these changes have been merged into Inform 6.32.

This is not my wish-list, nor is it anybody's roadmap for future I6 
changes. I simply want to catalog what's been done to this source tree.

------------------

(unlisted). Make INDIV_PROP_START a memory setting for Glulx, rather than
a constant.
(This allows a Glulx game to have more than 256 common properties.)

(unlisted). Argument -y (trace linker calls) now has levels from -y1 to -y4.

(unlisted). Arguments -a and -t (show assembly, assembly with hex) renamed 
to -a1 and -a2.

(unlisted.) Argument -l displays all command-line arguments used.
(Replaces old -l argument, "list every statement run through Inform")

(unlisted). More -E error message formats (GCC format, reversed styles)

(unlisted). get_next_token_not_directive() function in syntax.c. Replaces
many calls to get_next_token(). Better error handling?

(unlisted). Some addition to string-abbreviation in Glulx. Not sure what's
going on there.

(unlisted). "Zcharacter special" directive. I think this sets the table
of characters that tokenize to single-character words? However, I don't
see any code to write the table out to the Z-code file, so this isn't
functional.

(unlisted) Can set a debug_flag bit ($80) to suppress verbose
property-tracing.
(VerboseDebugMessages() routine in veneer, called from various veneer
routines.)

(unlisted) If a symbol is defined twice, an extra error message is
printed listing the location of the previous definition.
(duplicate_error() function in errors.c, called from various places.
This has a comment: "#CK# - redo as a standard error and move calls
before other error". I assume CKnight wanted to do more work here.)

(unlisted) EXPANDED_MV assembly opcode flag, marking "inverted
branch and jump" opcodes? Extension to Z-machine for long-distance
branches? Not sure.

(unlisted) -v9 switch generates a file with a ".z9" extension.
(I don't believe there are any game file format changes caused by this.)

1. Introduce a default Incompatibility mode, slightly similar to
Strict mode, in which the compiler rejects (as errors, not warnings)
the use of constructs from earlier versions of Inform.
(-I command-line switch; sets incompatibility_switch global.
obsolete_warning() in errors.c throws an error if incompatibility_switch.
New obsolete_warning() calls in various places.)

20. The use of "$..." to introduce compiler options is intensely
annoying on *NIX systems. 
("%..." now works as well.)

23. Provide an "assert" verb.
(ASSERT_CODE in states.c; AssertFailed_VR veneer routine.
Uses assemblez_call_4() function in asm.c.)

56.  Better code generation for the constructs objectloop.
(make_objectloop_lists() function in objects.c; extra code in
OBJECTLOOP_CODE in states.c. Makes use of new -O command-line switch,
which sets optimise_setting global. -O1 for memory, -O2 for speed. I
have not looked to see exactly what the difference is.)

59. How about a separate file containing all of the Inform compiler's
messages, so that the compiler itself (and any output generated by the
veneer) can be translated into other languages?
(Set with +translation_name=... argument; default is "informtx.txt".
Translation_File global; read_translation_file() routine in errors.c;
many error calls wrapped in tx(), which translates error output if a
translation file is loaded. Uses file_read_line() utility function in
files.c.)

86. Make x=obj.prop synonymous with x=obj.&prop-->0 if the property
happens to be an array.
(I *think* this is what's going on with the ChLDPrB, ChLDPrW, ChSTPrB, 
ChSTPrW veneer routines. Uses assemblez_call_4() function in asm.c.)

99. Extend the Replace directive such that if the compiler encounters
Replace routine newname; then the compiler transparently renames
routine as newname when it is encountered.
(REPLACE_CODE case in directs.c gets fancier. Not sure how it works.)

104. Enhance +charset_map by: searching +include_path; supporting hex
numbers; treating a mapping of zero as 'pass this char through without
change'.
(open_map_file() function in chars.c. Uses file_read_line() utility
function in files.c.)

109. Enhance #Include by: taking a "?" prefix to mean ignore a missing
file; accepting a string constant as a filename.
(load_sourcefile() now takes an extra argument, ignore_missing;
INCLUDE_CODE case in directs.c. Also, extra work is done to save
uncompressed string constants in directs.c.)

114. The #End directive in a #Included file should simply exit from
that specific inclusion rather than terminate the entire input stream.
(END_CODE case in directs.c becomes more complicated.)

115. An #Undef directive to cause a previously defined constant (only)
to become undefined.
(UNDEF_CODE case in directs.c; end_symbol_scope() function in symbols.c.)


